/* -*- Mode: C -*- */
/*
** linker_symbols.def
** Symbols needed from linker_modtools.exe
*/

/*
** #define DEFSYMCODE(symbol,offset,returntype,parameterlist)
** #define DEFSYMDATA(symbol,offset,datatype)
*/


/* global variables */
/*
** bool b_luaStripDebug;
**  True if lua debug info should not be written to files
*/
DEFSYMDATA(b_luaStripDebug, 0x259D5B39, bool)
/*
** bool b_dedicated;
**  True if linking a server fastfile
*/
DEFSYMDATA(b_dedicated, 0x259D5C74, bool)
/*
** bool b_localized;
**  True if linking a localized fastfile
*/
DEFSYMDATA(b_localized, 0x259D5C76, bool)

/* the Rawfile loader in the LoadAsset table */
DEFSYMDATA(LoadAsset_RawFile_Callback, 0xC86438, LoadAsset_func)

/*****************************************************************************/
/* FS library */

/*
** int FS_FOpenFileRead (const char *filename, fileHandle_t *file)
**  Opens a file named FILENAME in read mode, storing the handle in FILE
**  Returns the size of the file
*/
DEFSYMCODE(FS_FOpenFileRead, 0x2D00, int,
           (const char *filename, fileHandle_t *file))
/*
** fileHandle_t FS_FOpenFileWrite (const char *filename)
**  Opens a file named FILENAME in write mode
**  Returns the handle to the file
*/
DEFSYMCODE(FS_FOpenFileWrite, 0x3030, fileHandle_t, (const char *filename))
/*
** int64_t FS_Read (void *buffer, int64_t len, fileHandle_t file)
**  Reads LEN bytes into BUFFER from FILE
**  Returns the number of bytes actually written to BUFFER
*/
DEFSYMCODE(FS_Read, 0x3D30, int64_t,
           (void *buffer, int64_t len, fileHandle_t file))
/*
** size_t FS_Write (const void *buffer, size_t len, fileHandle_t h)
**  Writes LEN bytes from BUFFER to H
**  Returns the number of bytes written to H
*/
DEFSYMCODE(FS_Write, 0x4740, size_t,
           (const void *buffer, size_t len, fileHandle_t h))
/*
** void FS_FCloseFile (fileHandle_t h)
**  Closes the file H
*/
DEFSYMCODE(FS_FCloseFile, 0x2AE0, void, (fileHandle_t h))

/*****************************************************************************/
/* memory */
DEFSYMCODE(Z_Malloc, 0xe3b0, void *, (size_t size))
DEFSYMCODE(Z_Free, 0xda60, void, (void *ptr))

/*****************************************************************************/
/* common */

/*
** void Com_Error (ErrorCode code, const char *fmt, ...)
**  Raise a fatal error with code CODE and a message given by FMT
*/
DEFSYMCODE(Com_Error, 0x318780, void, (ErrorCode code, const char *fmt, ...))
/*
** void Com_PrintError (int label, const char *fmt, ...)
**  Print an error message with a given LABEL
*/
DEFSYMCODE(Com_PrintError, 0x3189C0, void, (int label, const char *fmt, ...))
/*
** void Com_PrintInfo (int label, const char *fmt, ...)
**  Print a message with a given LABEL
*/
DEFSYMCODE(Com_PrintInfo, 0x318CF0, void, (int label, const char *fmt, ...))
/*
** int Com_sprintf (char *dest, int size, const char *fmt, ...)
**  Print a formatted string to a buffer DEST with size SIZE
**  Returns the number of characters written to DEST
*/
DEFSYMCODE(Com_sprintf, 0x2CAC40, int,
           (char *dest, int size, const char *fmt, ...))

/*****************************************************************************/
/* database */
/*
** void *DB_AllocStreamData (size_t n)
**  Returns an address in the current stream with at least N bytes of space
**  Advances the current stream position forward by at least N bytes
*/
DEFSYMCODE(DB_AllocStreamData, 0x177AD0, void *, (size_t n))

/*****************************************************************************/
/* string library */
/*
** int I_stricmp (const char *s1, const char *s2)
**  Compares 2 strings, ignoring case
**  Returns 0 if the strings are equal
*/
DEFSYMCODE(I_stricmp, 0x2CB410, int, (const char *s1, const char *s2))

/*****************************************************************************/
/* SEH library */
/*
** int SEH_GetCurrentLanguage (void)
**  Returns the language ID of the current language
*/
DEFSYMCODE(SEH_GetCurrentLangauge, 0x32DDB0, int, (void))
/*
** const char *SEH_GetLanguageName (const int iLanguage)
**  Returns the string name of the given language ID ILANGUAGE
*/
DEFSYMCODE(SEH_GetLanguageName, 0x27D140, const char *, (const int iLanguage))
